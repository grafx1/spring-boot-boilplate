name: Publish to Maven Central

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Extract version from Gradle
        id: version
        run: echo "version=$(./gradlew -q properties | grep "^version:" | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: Import GPG key
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Build & publish to Maven local
        run: ./gradlew clean build publishMavenJavaPublicationToMavenLocal signMavenJavaPublication

      - name: Create central-bundle.zip from ~/.m2
        run: |
          mkdir bundle

          # Localisation des artefacts
          ARTIFACT_PATH="$HOME/.m2/repository/io/github/grafx1/scaffolder/spring-boot-scaffolder/${{ steps.version.outputs.version }}"
      
          # Copie des artefacts à la racine du dossier bundle
          cp $ARTIFACT_PATH/* bundle/
          
          cd bundle

          for f in *; do
          [ -f "$f" ] || continue
          md5sum "$f" | awk '{ print $1 }' > "$f.md5"
          sha1sum "$f" | awk '{ print $1 }' > "$f.sha1"
          done
          
          # Créer le ZIP sans aucun ./ ni dossier
          # On utilise zip à partir d'une liste de fichiers sans chemin
          find . -maxdepth 1 -type f -printf "%P\n" | zip ../central-bundle.zip -@
          cd ..

      - name: Upload bundle to Sonatype Central Publisher
        id: upload
        run: |
          response=$(curl -s -X POST \
            -H "Authorization: Bearer $SONATYPE_TOKEN" \
            -F bundle=@central-bundle.zip \
            https://central.sonatype.com/api/v1/publisher/upload)

          echo "$response"
          echo "deployment_id=$(echo $response | jq -r '.deploymentId')" >> $GITHUB_OUTPUT
        env:
          SONATYPE_TOKEN: ${{ secrets.SONATYPE_TOKEN }}

      - name: Poll status & publish
        run: |
          echo "Checking validation status..."
          for i in {1..10}; do
            sleep 15
            status=$(curl -s -X POST \
              -H "Authorization: Bearer $SONATYPE_TOKEN" \
              "https://central.sonatype.com/api/v1/publisher/status?id=${{ steps.upload.outputs.deployment_id }}" \
              | jq -r '.status')

            echo "Status: $status"

            if [[ "$status" == "VALIDATED" ]]; then
              echo "Publishing deployment..."
              curl -X POST \
                -H "Authorization: Bearer $SONATYPE_TOKEN" \
                "https://central.sonatype.com/api/v1/publisher/deployment/${{ steps.upload.outputs.deployment_id }}"
              exit 0
            elif [[ "$status" == "FAILED" ]]; then
              echo "Validation failed"
              exit 1
            fi
          done
          echo "Timeout: validation not completed"
          exit 1
        env:
          SONATYPE_TOKEN: ${{ secrets.SONATYPE_TOKEN }}