name: Publish to Maven Central

on:
  push:
    tags:
      - 'v*.*.*'  # Ex: v1.1.0
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Version tag to publish (e.g. v2.1.1)'
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Determine release version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            version=${{ github.event.inputs.release_version }}
          else
            version=${GITHUB_REF##refs/tags/}
          fi
          echo "Publishing version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Import GPG key
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Build & publish to Maven local
        run: ./gradlew clean build publishMavenJavaPublicationToMavenLocal signMavenJavaPublication

      - name: Créer le central-bundle.zip (via Gradle)
        run: ./gradlew createCentralBundle

      - name: Vérifier le ZIP généré
        run: |
          ls -lh build/central-bundle.zip
          unzip -l build/central-bundle.zip

      - name: Upload bundle to Sonatype Central Publisher
        id: upload
        run: |
          response=$(curl -s -w "%{http_code}" -o response.json \
            -X POST \
            -H "Authorization: Bearer $SONATYPE_TOKEN" \
            -F bundle=@build/central-bundle.zip \
            https://central.sonatype.com/api/v1/publisher/upload)

          echo "HTTP Status: $response"
          cat response.json

          if [[ "$response" != "200" && "$response" != "201" ]]; then
            echo "Upload failed with status $response"
            exit 1
          fi

          deployment_id=$(cat response.json)
          echo "deployment_id=$deployment_id" >> $GITHUB_OUTPUT
        env:
          SONATYPE_TOKEN: ${{ secrets.SONATYPE_TOKEN }}

      - name: Poll status & publish
        run: |
          echo "Checking validation status..."
          for i in {1..10}; do
            sleep 15
            status=$(curl -s -X POST \
              -H "Authorization: Bearer $SONATYPE_TOKEN" \
              "https://central.sonatype.com/api/v1/publisher/status?id=${{ steps.upload.outputs.deployment_id }}" \
              | jq -r '.deploymentState')

            echo "Status: $status"

            if [[ "$status" == "VALIDATED" ]]; then
              echo "Publishing deployment..."
              curl -X POST \
                -H "Authorization: Bearer $SONATYPE_TOKEN" \
                "https://central.sonatype.com/api/v1/publisher/deployment/${{ steps.upload.outputs.deployment_id }}"
              exit 0
            elif [[ "$status" == "FAILED" ]]; then
              echo "Validation failed"
              exit 1
            fi
          done
          echo "⌛ Timeout: validation not completed"
          exit 1
        env:
          SONATYPE_TOKEN: ${{ secrets.SONATYPE_TOKEN }}
